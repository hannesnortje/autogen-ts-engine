#!/usr/bin/env python3
"""
Q&A Test with Generated Project

This script demonstrates Q&A functionality using the project generated by the AutoGen TS Engine.
"""

import os
import sys
from pathlib import Path

# Add the autogen_ts_engine to the path
sys.path.insert(0, str(Path(__file__).parent))

def main():
    """Test Q&A with the generated project."""
    print("üöÄ AutoGen TS Engine - Q&A with Generated Project")
    print("=" * 60)
    
    # Check API key
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå GOOGLE_API_KEY not found!")
        print("üí° Please set your API key:")
        print("   export GOOGLE_API_KEY='your_api_key_here'")
        return 1
    
    print("‚úÖ Google API key found")
    
    # Check if generated project exists
    project_file = Path("./gemini_test_project/src/gemini_test_project/main.py")
    if not project_file.exists():
        print("‚ùå Generated project not found!")
        print("üí° Please run the main Gemini test first:")
        print("   python run_gemini_test.py")
        return 1
    
    print("‚úÖ Found generated project")
    
    # Read the generated code
    with open(project_file, 'r') as f:
        code_content = f.read()
    
    print(f"üìÑ Read {len(code_content)} characters from {project_file}")
    
    # Test Gemini adapter
    try:
        from autogen_ts_engine.gemini_adapter import create_gemini_adapter, is_gemini_available
        from autogen_ts_engine.schemas import LLMBinding, LLMProvider
        
        if not is_gemini_available():
            print("‚ùå Gemini not available")
            return 1
        
        print("‚úÖ Gemini is available")
        
        # Create Gemini binding
        llm_binding = LLMBinding(
            provider=LLMProvider.GEMINI,
            model_name="gemini-1.5-flash",
            api_key=api_key
        )
        
        # Create adapter
        adapter = create_gemini_adapter(llm_binding)
        if not adapter:
            print("‚ùå Failed to create Gemini adapter")
            return 1
        
        print("‚úÖ Gemini adapter created successfully")
        
        # Test Q&A functionality
        print("\nüß™ Testing Q&A with Generated Project...")
        print("-" * 50)
        
        # Test questions about the generated code
        questions = [
            "What does this Python application do?",
            "How is logging configured in this application?",
            "What are the main functions and their purposes?",
            "How can this application be improved?",
            "What tests should be written for this code?",
            "What are the best practices implemented in this code?"
        ]
        
        for i, question in enumerate(questions, 1):
            print(f"\n‚ùì Question {i}: {question}")
            print("-" * 40)
            
            # Create context with the code
            context = f"""
Here's the Python code generated by the AutoGen TS Engine:

```python
{code_content}
```

Question: {question}

Please provide a detailed analysis and answer based on the code above.
"""
            
            try:
                response = adapter.generate_response(context)
                print(f"ü§ñ Answer: {response[:400]}...")
                if len(response) > 400:
                    print("   (truncated for display)")
            except Exception as e:
                print(f"‚ùå Error: {e}")
        
        print("\n‚úÖ Q&A test with generated project completed successfully!")
        print(f"\nüìÅ Project analyzed: {project_file}")
        
        return 0
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
